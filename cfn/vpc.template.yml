AWSTemplateFormatVersion: '2010-09-09'
Description: Example VPC that has two public subnets and two private subnets in different
  AZs NAT gateways to enable instances in private subnets to access the internet
Parameters:
  VpcCidrPrefix:
    Description: Top-level CIDR for VPC - this template assumes using a /16 prefix
      (ie 10.10 or 172.16).
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[.0-9]*'
    ConstraintDescription: can contain only numbers and a separating period (.)
Mappings: {}
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Join [., [!Ref 'VpcCidrPrefix', 0.0/16]]
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Network
        Value: Public
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Join [., [!Ref 'VpcCidrPrefix', 0.0/24]]
      AvailabilityZone: !Select ['0', !GetAZs {Ref: 'AWS::Region'}]
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Network
        Value: Public
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Join [., [!Ref 'VpcCidrPrefix', 2.0/24]]
      AvailabilityZone: !Select ['1', !GetAZs {Ref: 'AWS::Region'}]
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Network
        Value: Public
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Network
        Value: Public
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Network
        Value: Public
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'PublicRouteTable'
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      RouteTableId: !Ref 'PublicRouteTable'
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Network
        Value: Public
  InboundHTTPPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundSSHPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundDynamicPortsPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      NetworkAclId: !Ref 'PublicNetworkAcl'
  PublicSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      NetworkAclId: !Ref 'PublicNetworkAcl'
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Join [., [!Ref 'VpcCidrPrefix', 1.0/24]]
      AvailabilityZone: !Select ['0', !GetAZs {Ref: 'AWS::Region'}]
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Network
        Value: Private
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Join [., [!Ref 'VpcCidrPrefix', 3.0/24]]
      AvailabilityZone: !Select ['1', !GetAZs {Ref: 'AWS::Region'}]
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Network
        Value: Private
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Network
        Value: Private
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Network
        Value: Private
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1'
      RouteTableId: !Ref 'PrivateRouteTable1'
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2'
      RouteTableId: !Ref 'PrivateRouteTable2'
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable1'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATGateway1'
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable2'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATGateway2'
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Network
        Value: Private
  InboundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PrivateNetworkAcl'
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  OutboundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PrivateNetworkAcl'
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PrivateSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1'
      NetworkAclId: !Ref 'PrivateNetworkAcl'
  PrivateSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2'
      NetworkAclId: !Ref 'PrivateNetworkAcl'
  NATIPAddress1:
    Type: AWS::EC2::EIP
    DependsOn: GatewayToInternet
    Properties:
      Domain: vpc
  NATIPAddress2:
    Type: AWS::EC2::EIP
    DependsOn: GatewayToInternet
    Properties:
      Domain: vpc
  NATGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: GatewayToInternet
    Properties:
      AllocationId: !GetAtt [NATIPAddress1, AllocationId]
      SubnetId: !Ref 'PublicSubnet1'
  NATGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: GatewayToInternet
    Properties:
      AllocationId: !GetAtt [NATIPAddress2, AllocationId]
      SubnetId: !Ref 'PublicSubnet2'
Outputs:
  VpcId:
    Description: VPC
    Value: !Ref 'VPC'
  PublicSubnets:
    Description: Public subnet
    Value: !Join [',', [!Ref 'PublicSubnet1', !Ref 'PublicSubnet2']]
  PrivateSubnets:
    Description: Private subnet
    Value: !Join [',', [!Ref 'PrivateSubnet1', !Ref 'PrivateSubnet2']]
  AZs:
    Description: Availability zones
    Value: !Join [',', [!GetAtt [PrivateSubnet1, AvailabilityZone], !GetAtt [PrivateSubnet2,
          AvailabilityZone]]]
