AWSTemplateFormatVersion: '2010-09-09'
Description: '##AM - USE ONLY IN US regions - Builds on following description by adding an EC2 role & CWL / CW agent to instance. Latest AMI (as of 2.7.2016) is referenced for only Oregon region## AWS CloudFormation Sample Template LAMP_Single_Instance: Create a LAMP
  stack using a single EC2 instance and a local MySQL database for storage. This template
  demonstrates using the AWS CloudFormation bootstrap scripts to install the packages
  and files necessary to deploy the Apache web server, PHP and MySQL at instance launch
  time. **WARNING** This template creates an Amazon EC2 instance. You will be billed
  for the AWS resources used if you create a stack from this template.'

Parameters:

  TargetVPC:
    AllowedPattern: 'vpc-[a-zA-Z0-9]*'
    ConstraintDescription: must be a valid VPC ID
    Default: vpc-xxxxxxxx
    Description: VPC this application will live in
    MaxLength: '12'
    MinLength: '12'
    Type: AWS::EC2::VPC::Id

  TargetSubnet:
    AllowedPattern: 'subnet-[a-zA-Z0-9]*'
    ConstraintDescription: must be a valid subnet ID
    Default: subnet-xxxxxxxx
    Description: Subet this application will live in within your TargetVPC
    MaxLength: '15'
    MinLength: '15'
    Type: AWS::EC2::Subnet::Id

  LifecycleStage:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Default: test
    Description: Application lifecycle stage (prod, test, QA, etc)
    MaxLength: '64'
    MinLength: '1'
    Type: String

  DBName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Default: MyDatabase
    Description: MySQL database name
    MaxLength: '64'
    MinLength: '1'
    Type: String

  DBPassword:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
    Description: Password for MySQL database access
    MaxLength: '41'
    MinLength: '1'
    NoEcho: 'true'
    Type: String

  DBRootPassword:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
    Description: Root password for MySQL
    MaxLength: '41'
    MinLength: '1'
    NoEcho: 'true'
    Type: String

  DBUser:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Description: Username for MySQL database access
    MaxLength: '16'
    MinLength: '1'
    NoEcho: 'true'
    Type: String

  InstanceType:
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge

    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.micro
    Description: WebServer EC2 instance type
    Type: String

  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    MaxLength: '18'
    MinLength: '9'
    Type: String

Mappings:

  AWSInstanceType2Arch:
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSInstanceType2NATArch:
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64

  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0b33d91d
    us-east-2:
      HVM64: ami-c55673a0
    us-west-1:
      HVM64: ami-165a0876
    us-west-2:
      HVM64: ami-f173cc91

Resources:

  WebServerInstance:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Metadata:
      AWS::CloudFormation::Init:
        Configure:
          commands:
            01_set_mysql_root_password:
              command:
                Fn::Join:
                - ''
                - - mysqladmin -u root password '
                  - Ref: DBRootPassword
                  - ''''
              test:
                Fn::Join:
                - ''
                - - '$(mysql '
                  - Ref: DBName
                  - ' -u root --password='''
                  - Ref: DBRootPassword
                  - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
            02_create_database:
              command:
                Fn::Join:
                - ''
                - - mysql -u root --password='
                  - Ref: DBRootPassword
                  - ''' < /tmp/setup.mysql'
              test:
                Fn::Join:
                - ''
                - - '$(mysql '
                  - Ref: DBName
                  - ' -u root --password='''
                  - Ref: DBRootPassword
                  - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
            03_start_cloud_watch_logs:
              command:
                Fn::Join:
                - ''
                - - 'service awslogs start'
            04_enable_cloud_watch_logs_at_startup:
              command:
                Fn::Join:
                - ''
                - - 'chkconfig awslogs on'
            05_install_cloudwatch_metrics_script:
              command:
                Fn::Join:
                - ''
                - - 'curl -o /root/CloudWatchMonitoringScripts-1.2.1.zip http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip

                    '
                  - 'unzip /root/CloudWatchMonitoringScripts-1.2.1.zip -d /root

                    '
                  - 'rm /root/CloudWatchMonitoringScripts-1.2.1.zip

                    '
            06_enable_cloud_watch_metrics_script_with_cron:
              command:
                Fn::Join:
                - ''
                - - 'crontab /root/cron_cw.txt'
            07_install_ec2_ssm_agent:
              command:
                Fn::Join:
                - ''
                - - 'curl https://amazon-ssm-'
                  - Ref: AWS::Region
                  - '.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o /tmp/amazon-ssm-agent.rpm

                    '
                  - 'yum install -y /tmp/amazon-ssm-agent.rpm

                    '
        Install:
          files:
            /etc/awslogs/awscli.conf:
              content:
                Fn::Join:
                - ''
                - - '[plugins]

                    '
                  - 'cwlogs = cwlogs

                    '
                  - '[default]

                    '
                  - region =
                  - Ref: AWS::Region
                  - '

                    '
              group: root
              mode: '000400'
              owner: root
            /root/cron_cw.txt:
              content:
                Fn::Join:
                - ''
                - - '*/1 * * * * /root/aws-scripts-mon/mon-put-instance-data.pl --mem-util --mem-used --mem-avail --swap-util --swap-used --disk-path=/ --disk-path=/home --disk-space-util --disk-space-used --disk-space-avail'
                  - '

                    '
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/cfn-hup.conf:
              content:
                Fn::Join:
                - ''
                - - '[main]

                    '
                  - stack=
                  - Ref: AWS::StackId
                  - '

                    '
                  - region=
                  - Ref: AWS::Region
                  - '

                    '
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                Fn::Join:
                - ''
                - - '[cfn-auto-reloader-hook]

                    '
                  - 'triggers=post.update

                    '
                  - 'path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init

                    '
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - Ref: AWS::StackName
                  - '         --resource WebServerInstance '
                  - '         --configsets InstallAndRun '
                  - '         --region '
                  - Ref: AWS::Region
                  - '

                    '
                  - 'runas=root

                    '
            /tmp/setup.mysql:
              content:
                Fn::Join:
                - ''
                - - 'CREATE DATABASE '
                  - Ref: DBName
                  - ';

                    '
                  - 'GRANT ALL ON '
                  - Ref: DBName
                  - .* TO '
                  - Ref: DBUser
                  - '''@localhost IDENTIFIED BY '''
                  - Ref: DBPassword
                  - ''';

                    '
              group: root
              mode: '000400'
              owner: root
            /var/www/html/index.php:
              content:
                Fn::Join:
                - ''
                - - '<html>

                    '
                  - '  <head>

                    '
                  - '    <title>AWS CloudFormation PHP Sample</title>

                    '
                  - '    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">

                    '
                  - '  </head>

                    '
                  - '  <body>

                    '
                  - '    <h1>Welcome to the AWS CloudFormation PHP Sample</h1>

                    '
                  - '    <p/>

                    '
                  - '    <?php

                    '
                  - '      // Print out the current data and time

                    '
                  - '      print "The Current Date and Time is: <br/>";

                    '
                  - '      print date("g:i A l, F j Y.");

                    '
                  - '    ?>

                    '
                  - '    <p/>

                    '
                  - '    <?php

                    '
                  - '      // Setup a handle for CURL

                    '
                  - '      $curl_handle=curl_init();

                    '
                  - '      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);

                    '
                  - '      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);

                    '
                  - '      // Get the hostname of the intance from the instance metadata

                    '
                  - '      curl_setopt($curl_handle,CURLOPT_URL,''http://169.254.169.254/latest/meta-data/public-hostname'');

                    '
                  - '      $hostname = curl_exec($curl_handle);

                    '
                  - '      if (empty($hostname))

                    '
                  - '      {

                    '
                  - '        print "Sorry, for some reason, we got no hostname back
                    <br />";

                    '
                  - '      }

                    '
                  - '      else

                    '
                  - '      {

                    '
                  - '        print "Server = " . $hostname . "<br />";

                    '
                  - '      }

                    '
                  - '      // Get the instance-id of the intance from the instance
                    metadata

                    '
                  - '      curl_setopt($curl_handle,CURLOPT_URL,''http://169.254.169.254/latest/meta-data/instance-id'');

                    '
                  - '      $instanceid = curl_exec($curl_handle);

                    '
                  - '      if (empty($instanceid))

                    '
                  - '      {

                    '
                  - '        print "Sorry, for some reason, we got no instance id
                    back <br />";

                    '
                  - '      }

                    '
                  - '      else

                    '
                  - '      {

                    '
                  - '        print "EC2 instance-id = " . $instanceid . "<br />";

                    '
                  - '      }

                    '
                  - '      $Database   = "localhost";

                    '
                  - '      $DBUser     = "'
                  - Ref: DBUser
                  - '";

                    '
                  - '      $DBPassword = "'
                  - Ref: DBPassword
                  - '";

                    '
                  - '      print "Database = " . $Database . "<br />";

                    '
                  - '      $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)

                    '
                  - '                      or die("Could not connect: " . mysql_error());

                    '
                  - '      print ("Connected to $Database successfully");

                    '
                  - '      mysql_close($dbconnection);

                    '
                  - '    ?>

                    '
                  - '    <h2>PHP Information</h2>

                    '
                  - '    <p/>

                    '
                  - '    <?php

                    '
                  - '      phpinfo();

                    '
                  - '    ?>

                    '
                  - '  </body>

                    '
                  - '</html>

                    '
              group: apache
              mode: '000600'
              owner: apache
          packages:
            yum:
              httpd: []
              mysql: []
              mysql-libs: []
              mysql-server: []
              php: []
              php-mysql: []
              awslogs: []
              perl-Switch: []
              perl-DateTime: []
              perl-Sys-Syslog: []
              perl-LWP-Protocol-https: []
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              mysqld:
                enabled: 'true'
                ensureRunning: 'true'
        configSets:
          InstallAndRun:
          - Install
          - Configure
    Properties:
      IamInstanceProfile: !Ref Ec2InstanceProfile1
      Tags:
        - Key: LifecycleStage
          Value: !Ref LifecycleStage
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", "WebServerInstance" ] ]
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        DeviceIndex: '0'
        GroupSet:
        - Ref: WebServerSecurityGroup
        SubnetId:
          Ref: TargetSubnet
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - '#!/bin/bash -xe

              '
            - 'yum update -y aws-cfn-bootstrap

              '
            - '# Install the files and packages from the metadata

              '
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - Ref: AWS::StackName
            - '         --resource WebServerInstance '
            - '         --configsets InstallAndRun '
            - '         --region '
            - Ref: AWS::Region
            - '

              '
            - '# Signal the status from cfn-init

              '
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - Ref: AWS::StackName
            - '         --resource WebServerInstance '
            - '         --region '
            - Ref: AWS::Region
            - '

              '
    Type: AWS::EC2::Instance

  WebServerSecurityGroup:
    Properties:
      GroupDescription: Enable HTTP access via port 80
      VpcId:
        Ref: TargetVPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp:
          Ref: SSHLocation
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
    Type: AWS::EC2::SecurityGroup

  Ec2LoggingAndSsmRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      Policies:
        -
          PolicyName: "cw-and-cwl-agent"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"
              -
                Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricData"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:ListMetrics"
                  - "ec2:DescribeTags"
                Resource: "*"
  Ec2InstanceProfile1:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "Ec2LoggingAndSsmRole"

  EbsDataVolume:
    Type: "AWS::EC2::Volume"
    Properties:
      AutoEnableIO: false
      AvailabilityZone: !GetAtt WebServerInstance.AvailabilityZone
      Encrypted: false
      Size: 50
      Tags:
        - Key: LifecycleStage
          Value: !Ref LifecycleStage
        - Key: VolumeUsage
          Value: dataVol
        - Key: Name
          Value: WebServerInstanceDataVolume
      VolumeType: gp2
  DataVolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref WebServerInstance
      VolumeId: !Ref EbsDataVolume

Outputs:
  WebsiteIP:
    Description: URL for newly created LAMP stack
    Value:
      Fn::Join:
      - ''
      - - http://
        - !GetAtt WebServerInstance.PublicIp
